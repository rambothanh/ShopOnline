@page "/edit/{producId:int?}"
@inject HttpClient Http
@using System.IO


<h1>Edit Product</h1>
@if (productModel == null)
{
    <p>Loading ... </p>
}
else
{
    <EditForm Model="@productModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @* Product Name *@
        <div class="form-group d-none">
            Product Id:
            <InputNumber id="Id" @bind-Value="productModel.Id" class="form-control" />
        </div>
        @* Product Name *@
        <div class="form-group">
            Product Name:
            <InputText id="Name" @bind-Value="productModel.Name" class="form-control" />
        </div>
        @* Product Type *@
        @if (productTypes == null)
        {
            <p> Loadding...</p>
        }
        else
        {
            <div class="form-group">
                Product Type:
                <select name="Type" id="Type" @bind="productModel.ProductTypeRefId" class="form-control">

                    @foreach (var type in productTypes)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }

                </select>
            </div>
        }
        @*End Product Type *@

        @* Product Brands *@
        @if (productBrands == null)
        {
            <p> Loading...</p>
        }
        else
        {
            <div class="form-group">
                Product Brand:
                <select name="Brand" id="Brand" @bind="productModel.ProductBrandRefId" class="form-control">

                    @foreach (var brand in productBrands)
                    {
                        <option value="@brand.Id">@brand.Name</option>
                    }

                </select>
            </div>
        }
        @* End Product Brands *@
        <div class="form-group">
            Short Description:
            <InputTextArea id="ShortDescription" @bind-Value="productModel.ShortDescription" class="form-control" />
        </div>

        <div class="form-group">
            Description:
            <InputTextArea id="Description" @bind-Value="productModel.Description" class="form-control" />
        </div>

        <div class="form-group">
            Quantity:
            <InputNumber id="Quantity" @bind-Value="productModel.Quantity" class="form-control" />
        </div>

        @* Product Price *@
        @if (productPrice == null)
        {
            <p>Loadding...</p>
        }
        else
        {
            <div class="form-group">
                Old Price: <input @bind="productPrice.CurrentPrice" type="number" min=0 step=0.01 id="OldPrice"
                                  class="form-control" />
            </div>

            <div class="form-group">
                Current Price: <input @bind="productPrice.OldPrice" type="number" min=0 step=0.01 id="CurrentPrice"
                                      class="form-control" />
            </div>
        }
        @* End Product Price *@
        
        @* Upload Image *@
        <form @onsubmit="OnSubmitUploadImage">
            <div class="form-group">
                @if(!(productImages?.Any() != true)){
                    <div class="@(disableUploadImage?"":"d-none")">
                        <p style="margin:0px">Current Product Images:</p>
                        @foreach (var productImage in productImages)
                        { 
                            if(!productImage.IsMainPicture){
                                <img src="http://localhost:4000/@productImage.PictureUri"
                                                class="mr-2 img-fluid"
                                                alt="Product Image"
                                                style="max-width: 8%">
                            }
                           
                        }
                    </div>
                }
                @* <div>
                    <p style="margin:0px">Current Product Image:</p>
                    <img src="http://localhost:4000/@productModel.PictureUri" class="img-fluid"
                         alt="Product Image"
                         style="max-width: 20%">
                </div> *@

                Change Image: @((MarkupString)messageImage)
                <div class="input-group mb-3">
                    <InputFile class="form-control" placeholder="Select image to change" OnChange="OnInputFileChange" multiple accept="image/png, image/jpeg" />
                    @* <input type="text" class="form-control"  > *@
                    <div class="d-none input-group-append">
                        <button disabled=@disableUploadImage class="btn btn-outline-secondary" type="submit">
                            <i class="@(submitingUploadImage?"":"d-none") fa fa-spinner fa-spin"></i>
                            Upload
                        </button>
                    </div>
                </div>

            </div>
        </form>
        @* End Upload Image *@
        <br />
        @* Message Success or Error *@
        <div class="@((string.IsNullOrEmpty(messageError)? "d-none" : "")) alert alert-danger" role="alert">
            @messageError
        </div>
        <div class="@((string.IsNullOrEmpty(messageSuccess)? "d-none" : "")) alert alert-success" role="alert">
            @messageSuccess
        </div>
        @* End Message Success or Error *@

    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group">
            <button disabled=@disableUpdateButton type="submit" class="btn btn-success">
                <i class="@(submitingProduct?"":"d-none") fa fa-spinner fa-spin"></i>
                Update
            </button>
        </div>
        <div class="btn-group mr-2" role="group">
            <button disabled=@disableDeleteButton @onclick="ClickDeleteButton" type="button" class="btn btn-danger">
                <i class="@(deletingButton?"":"d-none") fa fa-spinner fa-spin"></i>
                Delete
            </button>
        </div>
        
    </div>

    </EditForm>
}


@code {
    [Parameter]
    public int producId { get; set; }
    private Product productModel = new Product();
    private List<ProductBrand> productBrands;
    private List<ProductType> productTypes;
    
    private List<ProductImage> productImages;
    private ProductPrice productPrice;
    private bool submitingUploadImage = false;
    private bool disableUploadImage = true;
    private bool submitingProduct = false;
    private bool disableUpdateButton = false;
    private bool deletingButton = false;
    private bool disableDeleteButton = false;


    private string messageSuccess;
    private string messageError;
    string messageImage = "No images selected (720x900)";
    IReadOnlyList<IBrowserFile> selectedFiles;




    protected override async Task OnInitializedAsync()
    {
        productModel = await Http.GetFromJsonAsync<Product>($"Products/{producId}");
        productBrands = await Http.GetFromJsonAsync<List<ProductBrand>>($"ProductBrands");
        productTypes = await Http.GetFromJsonAsync<List<ProductType>>($"ProductTypes");
        productPrice = await Http.GetFromJsonAsync<ProductPrice>($"ProductPrices/{producId}");
        productImages = await Http.GetFromJsonAsync<List<ProductImage>>($"UploadImage/{producId}");

    }

    private async Task HandleValidSubmit()
    {
        submitingProduct = true;
        var productResponse = await Http.PutAsJsonAsync($"Products/{producId}", productModel);
        if (productResponse.IsSuccessStatusCode)
        {
            //Add productPrice by call API
            var responsePP = await Http.PutAsJsonAsync($"ProductPrices/{producId}", productPrice);

            if (responsePP.IsSuccessStatusCode)
            {
                messageSuccess = "A Product has edited";
                messageError = "";
                submitingProduct = false;
            }
            else
            {
                messageError = "Error while calling API to edit product price";
                messageSuccess = "";
                submitingProduct = false;
            }

        }
        else
        {
            messageError = "Error while calling API to edit product";
            messageSuccess = "";
            submitingProduct = false;
        }
    }

    @* When choose images *@
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        //Mở lại nút upload
        disableUploadImage = false;

        selectedFiles = e.GetMultipleFiles();
        if(selectedFiles.Count>4)
        {
            messageImage = $"<span class='badge badge-pill badge-danger'>{selectedFiles.Count} image(s)</span> selected, only accept 4 pictures";
            return;
        }
        messageImage = $"<span class='badge badge-pill badge-light'>{selectedFiles.Count} image(s)</span> selected";
        
        this.StateHasChanged();
        OnSubmitUploadImage();
    }

    @* End choosed image *@

    @* OnSubmit upload image *@
    private async void OnSubmitUploadImage()
    {
        // Bấm upload image 1 lần, bấm tiếp lần nữa bị lỗi
        // Chưa tìm ra chỗ lỗi, xử lý bằng cách disable
        if (selectedFiles != null)
        {
            submitingUploadImage = true;
                        
            // Handle file upload and upload file
            foreach (var file in selectedFiles)
            {

                Stream stream = file.OpenReadStream();
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();
                //Create uploadImage
                Models.Entities.Products.UploadImage uploadImage = new Models.Entities.Products.UploadImage();
                uploadImage.ProductId = producId;
                uploadImage.FileName = file.Name;
                uploadImage.FileContent = ms.ToArray();
                ms.Close();

                await Http.PostAsJsonAsync<Models.Entities.Products.UploadImage>
                    ("UploadImage", uploadImage);

            }


            messageImage = $"<span class='badge badge-pill badge-success'>{selectedFiles.Count} image(s)</span> uploaded";
            //Get Image to show
            productImages = await Http.GetFromJsonAsync<List<ProductImage>>($"UploadImage/{producId}");
            
            //Vô hiệu hoá nút Upload
            disableUploadImage = true;
            //Tắt hiệu ứng loading
            submitingUploadImage = false;
            this.StateHasChanged();
        }
    }
    @* End OnSubmit upload image *@

    @* Delete Product*@
private async void ClickDeleteButton()
{

    deletingButton = true;
    //Delete image first
    await Http.DeleteAsync($"UploadImage/{producId}");
    //Delete Product
    var deleteProductHttp = await Http.DeleteAsync($"Products/{producId}");
    if (deleteProductHttp.IsSuccessStatusCode)
    {
        messageSuccess = "A Product has deleted";
        messageError = "";
        deletingButton = false;
        disableDeleteButton = true;
        disableUpdateButton = true;
    }
    else
    {
        messageError = "Error while calling API to delete product";
        messageSuccess = "";
        deletingButton = false;
    }
    this.StateHasChanged();

}
}
