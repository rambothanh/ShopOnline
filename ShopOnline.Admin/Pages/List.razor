@page "/list"
@page "/list/{PageNumber:int?}"
@using System.Text.Json
@using System.IO
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


@if (products == null)
{
    <p>Loading...</p>
}
else
{
    <div class="@((string.IsNullOrEmpty(message)? "d-none" : "")) alert alert-warning" role="alert">
        @message
    </div>
    <table id="table_id" class="table table-striped table-hover table-sm table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Brand</th>
                <th>Quantity</th>
                <th>Current Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Product product in products)
            {
                <tr>

                    <td>@product.Name</td>
                    <td>@product.ProductType.Name</td>
                    <td>@product.ProductBrand.Name</td>

                    <td>@product.Quantity</td>
                    <td>@product.ProductPrice.CurrentPrice</td>
                    <td class="text-center">
                        <span @onclick="()=>EditProduct(product)" id="@("editproduct"+@product.Id)"
                            class=" btn mr-3 oi oi-pencil" aria-hidden="true"></span>
                        <span @onclick="()=>DeleteProduct(product)" id="@("deleteproduct"+@product.Id)"
                            class="mr-3 oi oi-delete" aria-hidden="true"></span>
                    </td>
                </tr>
            }
        </tbody>
        @*<tfoot>
            <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Brand</th>
            <th>Short Description</th>
            <th>Quantity</th>
            <th>Current Price</th>
            <th>Action</th>
            </tr>
            </tfoot>*@
    </table>
    <ul class="pagination pagination-sm">
        <li @onclick="()=>PrevPage()" class="page-item"><a class="page-link">Previous</a></li>
        @for (var i = firstPage; i <= firstPage + totalShowPage - 1; ++i)
            {
                var page = i;
                var disabled = page == pagination.CurrentPage;
                <li disabled="@disabled" @onclick="()=>GoToPage(page)"  page ="@i" class='page-item'><a class='page-link'>@i</a></li>
            }
        <li @onclick="()=>NextPage()" class="page-item"><a class="page-link" >Next</a></li>
    </ul>
    @((MarkupString)list_li_page)
}

@code {
    [Parameter]
    public int? PageNumber { get; set; }
    //JS
    private IJSObjectReference _jsModule;
    private List<Product> products;
    private string message;
    private int pageNumber = 1;
    private int pageSize = 10;
    private string orderBy = "id desc";
    private Pagination pagination;
    private int totalShowPage = 5;
    private int firstPage =1;
    private string list_li_page = "";

    protected override async Task OnParametersSetAsync()
    {
        //Default PageNumber is 1
        PageNumber = PageNumber ?? pageNumber;
        //BaseAPI + "Products?PageNumber=1&PageSize=10&OrderBy=id desc"
        @* products = await
            Http.GetFromJsonAsync<List<Product>>($"Products?PageNumber={PageNumber}&PageSize={pageSize}&OrderBy={orderBy}"); *@

        var response = await Http.GetAsync($"Products?PageNumber={PageNumber}&PageSize={pageSize}&OrderBy={orderBy}");
        if (response.IsSuccessStatusCode)
        {
            products = await response.Content.ReadFromJsonAsync<List<Product>>();
            #region Pagination
            // x-pagination
            @* {"TotalCount":22,"PageSize":10,"CurrentPage":1,"TotalPages":3,"HasNext":true,"HasPrevious":false} *@
            pagination = JsonSerializer.Deserialize<Pagination>(response.Headers.GetValues("x-pagination").ElementAt(0));
            totalShowPage = totalShowPage <= pagination.TotalPages ? totalShowPage : pagination.TotalPages;
            //Bên trái của page hiện tại luôn luôn có totalLeftPage page
            var totalLeftPage = totalShowPage / 2 - 1; //EX.=2
            //Bên phải của page hiện tại luôn luôn có totalRightPage page
            var totalRightPage = totalShowPage - totalLeftPage - 1;
            //Tính toán để hiển thị page đầu tiên
            //Nếu CurrentPage nhỏ hơn số lượng page bên trái thì firstPage =1;
            //Xét trường hợp lớn hơn
            if (pagination.CurrentPage > totalLeftPage)
            {
                //Trường hợp CurrentPage lớn hơn (pagination.TotalPages - totalRightPage)
                //Thì firstPage = TotalPages - totalShowPage - 1 (tức cố định firstPage từ vị trí này)
                if (pagination.CurrentPage >= (pagination.TotalPages - totalRightPage))
                {
                    firstPage = pagination.TotalPages - totalShowPage + 1;
                    //Trường hợp bình thường cứ lấy page hiện tại trừ số page muốn hiện thị ở bên trái của nó
                }
                else
                {

                    firstPage = pagination.CurrentPage - totalLeftPage;
                }
            }
            //Create html list_li_page
            @* <ul class="pagination pagination-sm">
                <li class="page-item"><a class="page-link" href="#">Previous</a></li>
                <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item"><a class="page-link" href="#">Next</a></li>
                </ul> *@
            list_li_page = "<ul class='pagination pagination-sm'><li class='page-item prev'><a class='page-link prev'>Prev</a></li>";
            for (var i = firstPage; i <= firstPage + totalShowPage - 1; ++i)
            {
                var activeSpan = i == pagination.CurrentPage ? "<span class='sr-only'>(current)</span>" : "";
                list_li_page += "<li page =" + i + " class='page-item'><a class='page-link'>" + i +activeSpan+ "</a></li>";
            }
            list_li_page += "<li class='page-item next'><a class='page-link next'>Next</a></li></ul>";
            #endregion Pagitation
        }
    }
    protected override async Task OnInitializedAsync()
    {
        
        //import js
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./ListScripts.js");

    }
    @* Click to Page Number *@
    private void GoToPage(int page){
        if(page!=pagination.CurrentPage){
            NavigationManager.NavigateTo($"list/{page}");
        }
    }
    @* Click to Prev Page *@
    private void PrevPage(){
        if(pagination.HasPrevious){
            NavigationManager.NavigateTo($"list/{pagination.CurrentPage-1}");
        }
    }
    @* Click to Next Page *@
    private void NextPage(){
        if(pagination.HasNext){
            NavigationManager.NavigateTo($"list/{pagination.CurrentPage+1}");
        }
    }

    @* Click delete icon *@
    private async Task DeleteProduct(Product product)
    {
        //Delete image first
        await Http.DeleteAsync($"UploadImage/{product.Id}");
        //Delete Product
        var deleteProductHttp = await Http.DeleteAsync($"Products/{product.Id}");
        message = "A product has deleted";
        this.StateHasChanged();
    }
    @* End Click delete icon *@

    @* Click edit icon *@
    private void EditProduct(Product product)
    {
        //Nagigation to Edit page
        NavigationManager.NavigateTo($"edit/{product.Id}");

    }
    @* End Click edit icon *@

}
