@page "/"
@inject HttpClient Http

<h1>Create Product</h1>



<EditForm Model="@ProductModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        Product Name: <InputText id="Name" @bind-Value="ProductModel.Name" class="form-control" />
    </div>

    <div class="form-group">
        Short Description: <InputTextArea id="ShortDescription" @bind-Value="ProductModel.ShortDescription" class="form-control" />
    </div>

    <div class="form-group">
        Description: <InputTextArea id="Description" @bind-Value="ProductModel.Description" class="form-control" />
    </div>

    <div class="form-group">
        Product Brand Id: <InputNumber id="BrandId" @bind-Value="ProductModel.ProductBrandRefId" class="form-control" />
    </div>

    <div class="form-group">
        Quantity: <InputNumber id="Quantity" @bind-Value="ProductModel.Quantity" class="form-control" />
    </div>
    @if (productBrands == null)
    {
       <p> Loadding...</p>
}
    else
    {
        <div class="form-group">
            Product Brand:
            <select name="Brand" id="Brand" @bind="ProductModel.ProductBrandRefId" class="form-control">
                <option selected>Select Brand</option>
                @foreach (var brand in productBrands)
                {
                    <option value="@brand.Id">@brand.Name</option>
                }
                
            </select>
        </div>
    }



    <br />

    <button type="submit" class="btn btn-success">Submit</button>
</EditForm>



@code{
    private Product ProductModel = new Product();
    private List<ProductBrand> productBrands;


    private void HandleValidSubmit()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        productBrands = await Http.GetFromJsonAsync<List<ProductBrand>>($"ProductBrands");
    }
}
