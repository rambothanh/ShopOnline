@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@using System.IO


<h1>Add a Product</h1>


<EditForm Model="@ProductModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @* Product Name *@
    <div class="form-group">
        Product Name:
        <InputText id="Name" @bind-Value="ProductModel.Name" class="form-control" />
    </div>
    @* Product Type *@
    @if (productTypes == null)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {
        <div class="form-group">
            Product Type:
            <select name="Type" id="Type" @bind="ProductModel.ProductTypeRefId" class="form-control">

                @foreach (var type in productTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }

            </select>
        </div>
    }
    @* Product Brands *@
    @if (productBrands == null)
    {
       <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    }
    else
    {
        <div @onfocusout="PostToGetIdProduct" class="form-group">
            Product Brand:
            <select name="Brand" id="Brand" @bind="ProductModel.ProductBrandRefId" class="form-control">

                @foreach (var brand in productBrands)
                {
                    <option value="@brand.Id">@brand.Name</option>
                }

            </select>
        </div>
    }

    <div class="form-group">
        Short Description:
        <InputTextArea id="ShortDescription" @bind-Value="ProductModel.ShortDescription" class="form-control" />
    </div>

    <div class="form-group">
        Description:
        <InputTextArea id="Description" @bind-Value="ProductModel.Description" class="form-control" />
    </div>

    <div class="form-group">
        Quantity:
        <InputNumber min=0 id="Quantity" @bind-Value="ProductModel.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        Old Price: <input type="number" min=0 step=0.01 id="OldPrice" @bind="oldPrice" class="form-control" />
    </div>

    <div class="form-group">
        Current Price: <input type="number" min=0 step=0.01 id="CurrentPrice" @bind="currentPrice"
            class="form-control" />
    </div>
    @* Upload Image *@
    <form @onsubmit="OnSubmit">
    <div class="form-group">
            Product Image: @((MarkupString)messageImage)
            <div class="row">
                <div class="col-sm">
                    <InputFile class="form-control" OnChange="OnInputFileChange" multiple accept="image/png, image/jpeg" />
                </div>
                <div class="col-sm">
                    <button class="btn btn-primary" type="submit">Upload</button>
                </div>
            </div>

        </div>
    </form>
    @* End Upload Image *@

    <br />
    <div class="@((string.IsNullOrEmpty(messageError)? "d-none" : "")) alert alert-danger" role="alert">
        @messageError
    </div>
    <div class="@((string.IsNullOrEmpty(messageSuccess)? "d-none" : "")) alert alert-success" role="alert">
        @messageSuccess
    </div>
    <div class="spinner-border @(submiting?"":"d-none")" role="status">
        <span class="sr-only">Loading...</span>
    </div>
    <button type="submit" class="@(submiting?"d-none":"") btn btn-success">Submit</button>
</EditForm>

@code{
    private int idProductNow;
    private Product ProductModel = new Product();
    private List<ProductBrand> productBrands;
    private List<ProductType> productTypes;
    private string messageSuccess;
    private string messageError;
    private ProductPrice productPrice;
    private Decimal currentPrice;
    private Decimal oldPrice;
    private int test;
    private bool submiting =false;
        

    string messageImage = "No file(s) selected";
    IReadOnlyList<IBrowserFile> selectedFiles;
    
    @* When choose images *@
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        messageImage = $"<span class='badge badge-pill badge-light'>{selectedFiles.Count} image(s)</span> selected";
        this.StateHasChanged();
    }
    
    @* OnSubmit upload image *@
    private async void OnSubmit()
    {
        foreach (var file in selectedFiles)
        {
            
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            Models.Entities.Products.UploadImage uploadImage = new Models.Entities.Products.UploadImage();
            uploadImage.ProductId = idProductNow;
            uploadImage.FileName = file.Name;
            uploadImage.FileContent = ms.ToArray();
            ms.Close();

            await Http.PostAsJsonAsync<Models.Entities.Products.UploadImage>
                ("UploadImage", uploadImage);
        }
        messageImage = $"<span class='badge badge-pill badge-success'>{selectedFiles.Count} image(s)</span> uploaded";
        this.StateHasChanged();
    }
    @* End OnSubmit upload image *@

    @* Post to server When choosed Brand  *@
    private async Task PostToGetIdProduct(){
        var response = await Http.PostAsJsonAsync("Products", ProductModel);
       if (response.IsSuccessStatusCode)
        {
            //---------- Lấy product vừa thêm--------------
            //Mục đích là lấy id product cung cấp của ProductPrice
            //Vì ProductPrice có khóa chính là khóa ngoại với Product
            //Phương thức ReadAsStringAsync() đọc chuỗi Json
            //từ đối tượng dạng HttpResponseMessage
            string stringJsonData = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions
            {            
                PropertyNameCaseInsensitive = true
            };
            Product productHasAdd = JsonSerializer.Deserialize<Product>(stringJsonData, options);
        
            idProductNow = productHasAdd.Id;
        }
    }
    @* End Post to server When choosed Brand  *@

    @* PUT a Product to server *@
    private async Task HandleValidSubmit()
    {
        submiting = true;
        ProductModel.Id = idProductNow;
        var productResponse = await Http.PutAsJsonAsync($"Products/{idProductNow}", ProductModel);

        if (productResponse.IsSuccessStatusCode)
        {
            
            productPrice = new ProductPrice
            {
                Id = idProductNow,
                CurrentPrice = currentPrice,
                OldPrice = oldPrice,
            };

            //Add productPrice by call API
            if (productPrice != null)
            {
                var responsePP = await Http.PostAsJsonAsync("ProductPrices", productPrice);
                if (responsePP.IsSuccessStatusCode)
                {
                    messageSuccess = "A Product has added";
                    messageError = "";
                    submiting = false;
                }
                else
                {
                    messageError = "Error while calling API to create product price";
                    messageSuccess = "";
                    submiting = false;
                }
            }
        }
        else
        {
            messageError = "Error while calling API to create new Product";
            messageSuccess = "";
            submiting = false;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        productBrands = await Http.GetFromJsonAsync<List<ProductBrand>>($"ProductBrands");
        productTypes = await Http.GetFromJsonAsync<List<ProductType>>($"ProductTypes");
    }
}
