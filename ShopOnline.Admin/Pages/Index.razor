@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@using System.IO
@inject NavigationManager NavigationManager


<h1>Add a Product @ProductModel.Id</h1>


<EditForm Model="@ProductModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @* Product Name *@
    <div class="form-group">
        Product Name:
        <InputText id="Name" @bind-Value="ProductModel.Name" class="form-control" />
    </div>
    @* Product Type *@
    @if (productTypes == null)
    {
        <p> Loading...</p>

    }
    else
    {
        <div class="form-group">
            Product Type:
            <select name="Type" id="Type" @bind="ProductModel.ProductTypeRefId" class="form-control">

                @foreach (var type in productTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }

            </select>
        </div>
    }
    @* Product Brands *@
    @if (productBrands == null)
    {
        <p> Loading...</p>

    }
    else
    {
        <div @onfocusout="PostToGetIdProduct" class="form-group">
            Product Brand:
            <select name="Brand" id="Brand" @bind="ProductModel.ProductBrandRefId" class="form-control">

                @foreach (var brand in productBrands)
                {
                    <option value="@brand.Id">@brand.Name</option>
                }

            </select>
        </div>
    }

    <div class="form-group">
        Short Description:
        <InputTextArea id="ShortDescription" @bind-Value="ProductModel.ShortDescription" class="form-control" />
    </div>

    <div class="form-group">
        Description:
        <InputTextArea id="Description" @bind-Value="ProductModel.Description" class="form-control" />
    </div>

    <div class="form-group">
        Quantity:
        <InputNumber min=0 id="Quantity" @bind-Value="ProductModel.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        Old Price: <input type="number" min=0 step=0.01 id="OldPrice" @bind="oldPrice" class="form-control" />
    </div>

    <div class="form-group">
        Current Price: <input type="number" min=0 step=0.01 id="CurrentPrice" @bind="currentPrice"
                              class="form-control" />
    </div>
    @* Upload Image *@
    <form @onsubmit="OnSubmitUploadImage">
        <div class="form-group">
            <div class="@(disableUploadImage?"":"d-none")">
                <p style="margin:0px">Current Product Image:</p>
                <img src="http://localhost:4000/@ProductModel.PictureUri" class="img-fluid"
                     alt="Product Image"
                     style="max-width: 20%">
            </div>

            Product Image: @((MarkupString)messageImage)
            <div class="input-group mb-3">
                <InputFile class="form-control" placeholder="Select image to change" OnChange="OnInputFileChange" multiple accept="image/png, image/jpeg" />

                <div class="d-none input-group-append">
                    <button disabled=@disableUploadImage class="btn btn-outline-secondary" type="submit">
                        <i class="@(submitingUploadImage?"":"d-none") fa fa-spinner fa-spin"></i>
                        Upload
                    </button>
                </div>
            </div>
        </div>
    </form>
    @* End Upload Image *@

    <br />
    <div class="@((string.IsNullOrEmpty(messageError)? "d-none" : "")) alert alert-danger" role="alert">
        @messageError
    </div>
    <div class="@((string.IsNullOrEmpty(messageSuccess)? "d-none" : "")) alert alert-success" role="alert">
        @messageSuccess
    </div>

    <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group mr-2" role="group">
            <button disabled=@disableSubmitProduct type="submit" class="btn btn-success ">
                <i class="@(submitingProduct?"":"d-none") fa fa-spinner fa-spin"></i>
                Add Product
            </button>
        </div>
        <div class="btn-group mr-2" role="group">
            <button disabled=@(!disableSubmitProduct) @onclick="ClickContinueButton" type="button" class="btn btn-danger">
                <i class="@(continuingButton?"":"d-none") fa fa-spinner fa-spin"></i>
                Continue Add
            </button>
        </div>

    </div>
</EditForm>

@code{
    private int idProductNow;
    private Product ProductModel = new Product();
    private List<ProductBrand> productBrands;
    private List<ProductType> productTypes;
    private string messageSuccess;
    private string messageError;
    string messageImage = "No file(s) selected (384x480)";
    private ProductPrice productPrice;
    private Decimal currentPrice;
    private Decimal oldPrice;

    private bool continuingButton = false;
    private bool submitingUploadImage = false;
    private bool disableUploadImage = false;
    private bool submitingProduct = false;
    private bool disableSubmitProduct = false;

    IReadOnlyList<IBrowserFile> selectedFiles;

    private void ClickContinueButton()
    {
        continuingButton = true;
        //Nagigation to Edit page
        NavigationManager.NavigateTo($"");
        ClearForm();
        continuingButton = false;
        disableSubmitProduct = false;
        disableUploadImage = false;
        continuingButton = false;
        StateHasChanged();

    }

    private void ClearForm()
    {
        idProductNow++;
        ProductModel.Id = idProductNow;
        continuingButton = false;
        ProductModel.Name = "";
        ProductModel.ProductBrandRefId = 0;
        ProductModel.ProductTypeRefId = 0;
        ProductModel.Quantity = 0;
        ProductModel.PictureUri = "";
        oldPrice = 0;
        currentPrice = 0;
        messageSuccess = "";
        messageError = "";
        messageImage = "No file(s) selected (384x480)";

    }

    @* When choose images *@
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        //Mở lại nút upload
        disableUploadImage = false;
        selectedFiles = e.GetMultipleFiles();
        messageImage = $"<span class='badge badge-pill badge-light'>{selectedFiles.Count} image(s)</span> selected";
        this.StateHasChanged();
        //submit, don't need click button
        OnSubmitUploadImage();
    }
    @* End choosed image *@

    @* OnSubmit upload image *@
    private async void OnSubmitUploadImage()
    {
        //Check if not get idProduct yet
        if (idProductNow == 0)
            return;

        //Delete image if existed
        //Delete Old Image
        var deleteImage = await Http.DeleteAsync($"UploadImage/{idProductNow}");

        // Bấm upload image 1 lần, bấm tiếp lần nữa bị lỗi
        // Chưa tìm ra chỗ lỗi, xử lý bằng cách disable
        if (selectedFiles != null)
        {
            submitingUploadImage = true;
            ////Delete Old Image
            //var deleteImage = await Http.DeleteAsync($"UploadImage/{producId}");
            //Run Update Product đồng thời
            //await HandleValidSubmit();
            // Handle file upload and upload file
            foreach (var file in selectedFiles)
            {

                Stream stream = file.OpenReadStream();
                MemoryStream ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                stream.Close();
                Models.Entities.Products.UploadImage uploadImage = new Models.Entities.Products.UploadImage();
                uploadImage.ProductId = idProductNow;
                uploadImage.FileName = file.Name;
                uploadImage.FileContent = ms.ToArray();
                ms.Close();

                await Http.PostAsJsonAsync<Models.Entities.Products.UploadImage>
                    ("UploadImage", uploadImage);

            }


            messageImage = $"<span class='badge badge-pill badge-success'>{selectedFiles.Count} image(s)</span> uploaded";
            //Reload Product
            ProductModel = await Http.GetFromJsonAsync<Product>($"Products/{idProductNow}");
            //Vô hiệu hoá nút Upload
            disableUploadImage = true;
            //Tắt hiệu ứng loading
            submitingUploadImage = false;
            this.StateHasChanged();

        }
    }
    @* End OnSubmit upload image *@

    @* Post to server When choosed Brand , purpose: get Id*@
    private async Task PostToGetIdProduct()
    {
        var response = await Http.PostAsJsonAsync("Products", ProductModel);
        if (response.IsSuccessStatusCode)
        {
            //---------- Lấy product vừa thêm--------------
            //Mục đích là lấy id product cung cấp của ProductPrice
            //Vì ProductPrice có khóa chính là khóa ngoại với Product
            //Phương thức ReadAsStringAsync() đọc chuỗi Json
            //từ đối tượng dạng HttpResponseMessage
            string stringJsonData = await response.Content.ReadAsStringAsync();
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            Product productHasAdd = JsonSerializer.Deserialize<Product>(stringJsonData, options);
            //Get id
            idProductNow = productHasAdd.Id;
            //Create price
            productPrice = new ProductPrice { Id = idProductNow };
            //Post price
            await Http.PostAsJsonAsync("ProductPrices", productPrice);

        }
    }
    @* End Post to server When choosed Brand  *@

    @* PUT a Product to server *@
    private async Task HandleValidSubmit()
    {

        submitingProduct = true;
        //Check if upload image button not click yet
        if (!disableUploadImage)
            OnSubmitUploadImage();

        ProductModel.Id = idProductNow;
        var productResponse = await Http.PutAsJsonAsync($"Products/{idProductNow}", ProductModel);

        if (productResponse.IsSuccessStatusCode)
        {
            //Add productPrice by call API
            if (productPrice != null)
            {
                productPrice.CurrentPrice = currentPrice;
                productPrice.OldPrice = oldPrice;
                var responsePP = await Http.PutAsJsonAsync($"ProductPrices/{idProductNow}", productPrice);
                if (responsePP.IsSuccessStatusCode)
                {
                    messageSuccess = "A Product has added";
                    messageError = "";
                    submitingProduct = false;
                    disableSubmitProduct = true;
                }
                else
                {
                    messageError = "Error while calling API to create product price";
                    messageSuccess = "";
                    submitingProduct = false;
                }
            }
        }
        else
        {
            messageError = "Error while calling API to create new Product";
            messageSuccess = "";
            submitingProduct = false;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        productBrands = await Http.GetFromJsonAsync<List<ProductBrand>>($"ProductBrands");
        productTypes = await Http.GetFromJsonAsync<List<ProductType>>($"ProductTypes");
    }
}
